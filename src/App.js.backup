import React, { useState } from 'react';
import { Plus, Search, Settings, TrendingUp, DollarSign, Home, Car, ShoppingCart, Heart, Smartphone, Coffee, MoreHorizontal, X, Edit2, Trash2, ChevronLeft, ChevronRight, PiggyBank, Receipt, AlertCircle, Eye, EyeOff, LogOut } from 'lucide-react';

const CATEGORIES = {
  expense: [
    { id: 'food', name: '식비', icon: Coffee, color: 'bg-orange-100 text-orange-600 border-orange-200', subCategories: ['외식', '장보기', '배달'] },
    { id: 'transport', name: '교통비', icon: Car, color: 'bg-blue-100 text-blue-600 border-blue-200', subCategories: ['대중교통', '주유', '택시'] },
    { id: 'living', name: '생활용품', icon: Home, color: 'bg-green-100 text-green-600 border-green-200', subCategories: ['마트', '약국', '청소용품'] },
    { id: 'medical', name: '의료비', icon: Heart, color: 'bg-red-100 text-red-600 border-red-200', subCategories: ['병원', '약값', '건강검진'] },
    { id: 'culture', name: '문화생활', icon: Coffee, color: 'bg-purple-100 text-purple-600 border-purple-200', subCategories: ['영화', '책', '취미'] },
    { id: 'fashion', name: '의류미용', icon: ShoppingCart, color: 'bg-pink-100 text-pink-600 border-pink-200', subCategories: ['옷', '화장품', '미용실'] },
    { id: 'communication', name: '통신비', icon: Smartphone, color: 'bg-indigo-100 text-indigo-600 border-indigo-200', subCategories: ['휴대폰', '인터넷'] },
    { id: 'gift', name: '용돈선물', icon: Heart, color: 'bg-rose-100 text-rose-600 border-rose-200', subCategories: [] },
    { id: 'other', name: '기타', icon: MoreHorizontal, color: 'bg-gray-100 text-gray-600 border-gray-200', subCategories: [] }
  ],
  income: [
    { id: 'salary', name: '급여', icon: DollarSign, color: 'bg-emerald-100 text-emerald-600 border-emerald-200', subCategories: ['우영', '달림'] },
    { id: 'side', name: '부수입', icon: TrendingUp, color: 'bg-cyan-100 text-cyan-600 border-cyan-200', subCategories: ['투자', '부업'] },
    { id: 'other', name: '기타', icon: MoreHorizontal, color: 'bg-gray-100 text-gray-600 border-gray-200', subCategories: [] }
  ]
};

const PAYMENT_METHODS = [
  { id: 'cash', name: '현금' },
  { id: 'credit', name: '신용카드' },
  { id: 'debit', name: '체크카드' },
  { id: 'transfer', name: '계좌이체' },
  { id: 'other', name: '기타' }
];

const MOCK_USERS = {
  user1: { id: 'user1', name: '우영', avatar: '👨', role: 'admin', color: 'bg-blue-500' },
  user2: { id: 'user2', name: '달림', avatar: '👩', role: 'user', color: 'bg-pink-500' }
};

const formatCurrency = (amount) => {
  return new Intl.NumberFormat('ko-KR').format(amount);
};

const getDaysInMonth = (date) => {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
};

const getFirstDayOfMonth = (date) => {
  return new Date(date.getFullYear(), date.getMonth(), 1).getDay();
};

export default function CoupledBudgetApp() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loginPassword, setLoginPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loginError, setLoginError] = useState('');
  const [currentView, setCurrentView] = useState('calendar');
  const [currentDate, setCurrentDate] = useState(new Date());
  const [showAddTransaction, setShowAddTransaction] = useState(false);
  const [currentUser] = useState(MOCK_USERS.user1);

  // 거래 내역 상태
  const [transactions, setTransactions] = useState([
    {
      id: 1,
      date: '2024-09-16',
      type: 'expense',
      category: 'food',
      subcategory: '외식',
      amount: 25000,
      paymentMethod: 'credit',
      memo: '점심 식사',
      userId: 'user1'
    },
    {
      id: 2,
      date: '2024-09-16',
      type: 'income',
      category: 'salary',
      subcategory: '우영',
      amount: 3500000,
      memo: '9월 급여',
      userId: 'user1'
    },
    {
      id: 3,
      date: '2024-09-20',
      type: 'expense',
      category: 'transport',
      subcategory: '대중교통',
      amount: 5000,
      paymentMethod: 'debit',
      memo: '지하철',
      userId: 'user2'
    }
  ]);

  // 고정지출 상태
  const [fixedExpenses, setFixedExpenses] = useState([
    {
      id: 1,
      name: '월세',
      category: 'living',
      amount: 800000,
      autoRegisterDate: 1,
      monthlyIncrease: 0,
      paymentMethod: 'transfer',
      memo: '월세',
      isActive: true
    }
  ]);

  // 폼 상태들
  const [editingTransaction, setEditingTransaction] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);
  
  const [transactionForm, setTransactionForm] = useState({
    type: 'expense',
    category: '',
    subcategory: '',
    amount: '',
    paymentMethod: '',
    memo: '',
    date: new Date().toISOString().split('T')[0]
  });

  // 고정지출 상태 추가
  // eslint-disable-next-line no-unused-vars
  const [showAddFixed, setShowAddFixed] = useState(false);
  const [editingFixed, setEditingFixed] = useState(null);
  const [fixedForm, setFixedForm] = useState({
    name: '',
    category: '',
    amount: '',
    autoRegisterDate: 1,
    monthlyIncrease: '',
    paymentMethod: '',
    memo: '',
    isActive: true
  });

  // 검색 상태 추가
  const [searchQuery, setSearchQuery] = useState('');
  const [searchFilters, setSearchFilters] = useState({
    type: 'all', // all, income, expense
    category: 'all',
    dateFrom: '',
    dateTo: '',
    amountMin: '',
    amountMax: '',
    user: 'all'
  });
  const [searchResults, setSearchResults] = useState([]);

  // 설정 상태 추가
  const [settings, setSettings] = useState({
    theme: 'default', // default, dark, colorful
    currency: 'KRW', // KRW, USD, EUR
    dateFormat: 'ko-KR', // ko-KR, en-US
    budget: {
      monthly: '',
      categories: {
        food: '',
        transport: '',
        living: '',
        medical: '',
        culture: '',
        fashion: '',
        communication: ''
      }
    },
    notifications: {
      budgetAlert: true,
      dailyReminder: false,
      weeklyReport: true
    },
    backup: {
      autoBackup: true,
      backupFrequency: 'weekly' // daily, weekly, monthly
    }
  });
  const [showBackupModal, setShowBackupModal] = useState(false);
  const [backupData, setBackupData] = useState('');

  // 로그인 관련 함수
  const handleLogin = () => {
    if (loginPassword === '1234') {
      setIsAuthenticated(true);
      setLoginError('');
      setLoginPassword('');
    } else {
      setLoginError('비밀번호가 틀렸습니다. (기본 비밀번호: 1234)');
    }
  };

  // 검색 관련 함수들 추가
  const performSearch = () => {
    let results = [...transactions];

    // 텍스트 검색 (메모, 카테고리 이름)
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      results = results.filter(transaction => {
        const category = CATEGORIES[transaction.type]?.find(c => c.id === transaction.category);
        const categoryName = category ? category.name.toLowerCase() : '';
        const subcategory = (transaction.subcategory || '').toLowerCase();
        const memo = (transaction.memo || '').toLowerCase();
        
        return categoryName.includes(query) || 
               subcategory.includes(query) || 
               memo.includes(query);
      });
    }

    // 타입 필터
    if (searchFilters.type !== 'all') {
      results = results.filter(t => t.type === searchFilters.type);
    }

    // 카테고리 필터
    if (searchFilters.category !== 'all') {
      results = results.filter(t => t.category === searchFilters.category);
    }

    // 날짜 범위 필터
    if (searchFilters.dateFrom) {
      results = results.filter(t => t.date >= searchFilters.dateFrom);
    }
    if (searchFilters.dateTo) {
      results = results.filter(t => t.date <= searchFilters.dateTo);
    }

    // 금액 범위 필터
    if (searchFilters.amountMin) {
      const minAmount = parseInt(searchFilters.amountMin);
      results = results.filter(t => t.amount >= minAmount);
    }
    if (searchFilters.amountMax) {
      const maxAmount = parseInt(searchFilters.amountMax);
      results = results.filter(t => t.amount <= maxAmount);
    }

    // 사용자 필터
    if (searchFilters.user !== 'all') {
      results = results.filter(t => t.userId === searchFilters.user);
    }

    // 날짜순 정렬 (최신순)
    results.sort((a, b) => new Date(b.date) - new Date(a.date));

    setSearchResults(results);
  };

  const resetSearch = () => {
    setSearchQuery('');
    setSearchFilters({
      type: 'all',
      category: 'all',
      dateFrom: '',
      dateTo: '',
      amountMin: '',
      amountMax: '',
      user: 'all'
    });
    setSearchResults([]);
  };

  const getAllCategories = () => {
    return [
      ...CATEGORIES.income.map(c => ({...c, type: 'income'})),
      ...CATEGORIES.expense.map(c => ({...c, type: 'expense'}))
    ];
  };

  // 설정 관련 함수들 추가
  const updateSettings = (newSettings) => {
    setSettings(prev => ({...prev, ...newSettings}));
    // 실제 앱에서는 localStorage나 서버에 저장
  };

  const exportData = () => {
    const exportObj = {
      transactions,
      fixedExpenses,
      settings,
      exportDate: new Date().toISOString(),
      version: '1.0'
    };
    const dataStr = JSON.stringify(exportObj, null, 2);
    setBackupData(dataStr);
    setShowBackupModal(true);
  };

  const importData = (jsonStr) => {
    try {
      const importObj = JSON.parse(jsonStr);
      if (importObj.transactions) {
        setTransactions(importObj.transactions);
      }
      if (importObj.fixedExpenses) {
        setFixedExpenses(importObj.fixedExpenses);
      }
      if (importObj.settings) {
        setSettings(importObj.settings);
      }
      alert('데이터를 성공적으로 가져왔습니다!');
    } catch (error) {
      alert('잘못된 데이터 형식입니다.');
    }
  };

  const resetAllData = () => {
    if (window.confirm('⚠️ 정말로 모든 데이터를 초기화하시겠습니까?\n\n이 작업은 되돌릴 수 없습니다.')) {
      setTransactions([]);
      setFixedExpenses([]);
      setSettings({
        theme: 'default',
        currency: 'KRW',
        dateFormat: 'ko-KR',
        budget: {
          monthly: '',
          categories: {
            food: '', transport: '', living: '', medical: '',
            culture: '', fashion: '', communication: ''
          }
        },
        notifications: {
          budgetAlert: true,
          dailyReminder: false,
          weeklyReport: true
        },
        backup: {
          autoBackup: true,
          backupFrequency: 'weekly'
        }
      });
      alert('모든 데이터가 초기화되었습니다.');
    }
  };

  const downloadBackup = () => {
    const blob = new Blob([backupData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `가계부_백업_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // 고정지출 관련 함수들 추가
  const resetFixedForm = () => {
    setFixedForm({
      name: '',
      category: '',
      amount: '',
      autoRegisterDate: 1,
      monthlyIncrease: '',
      paymentMethod: '',
      memo: '',
      isActive: true
    });
    setEditingFixed(null);
  };

  const handleAddFixedExpense = (formData) => {
    const newFixed = {
      id: Date.now(),
      ...formData,
      amount: parseInt(formData.amount) || 0,
      autoRegisterDate: parseInt(formData.autoRegisterDate) || 1,
      monthlyIncrease: parseInt(formData.monthlyIncrease) || 0
    };
    setFixedExpenses(prev => [...prev, newFixed]);
  };

  const handleUpdateFixedExpense = (id, formData) => {
    setFixedExpenses(prev => 
      prev.map(fixed => 
        fixed.id === id 
          ? { 
              ...fixed, 
              ...formData, 
              amount: parseInt(formData.amount) || 0,
              autoRegisterDate: parseInt(formData.autoRegisterDate) || 1,
              monthlyIncrease: parseInt(formData.monthlyIncrease) || 0 
            }
          : fixed
      )
    );
  };

  const handleDeleteFixedExpense = (id) => {
    setFixedExpenses(prev => prev.filter(fixed => fixed.id !== id));
  };

  const handleToggleActive = (id) => {
    setFixedExpenses(prev => 
      prev.map(fixed => 
        fixed.id === id ? { ...fixed, isActive: !fixed.isActive } : fixed
      )
    );
  };

  const startEditFixed = (fixed) => {
    setEditingFixed(fixed);
    setFixedForm({
      name: fixed.name,
      category: fixed.category,
      amount: fixed.amount.toString(),
      autoRegisterDate: fixed.autoRegisterDate,
      monthlyIncrease: fixed.monthlyIncrease.toString(),
      paymentMethod: fixed.paymentMethod || '',
      memo: fixed.memo || '',
      isActive: fixed.isActive
    });
    setShowAddFixed(true);
  };

  // eslint-disable-next-line no-unused-vars
  const handleSubmitFixed = () => {
    if (fixedForm.name && fixedForm.category && fixedForm.amount) {
      if (editingFixed) {
        handleUpdateFixedExpense(editingFixed.id, fixedForm);
      } else {
        handleAddFixedExpense(fixedForm);
      }
      resetFixedForm();
      setShowAddFixed(false);
    }
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setCurrentView('calendar');
    setLoginPassword('');
    setLoginError('');
  };

  // 유틸리티 함수들
  const getDayTransactions = (day, month, year) => {
    const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    return transactions.filter(t => t.date === dateStr);
  };

  const getFixedExpensesForDay = (day) => {
    return fixedExpenses.filter(expense => 
      expense.isActive && expense.autoRegisterDate === day
    );
  };

  // 거래 관련 함수들
  const handleAddTransaction = (formData) => {
    const newTransaction = {
      id: Date.now(),
      ...formData,
      amount: parseInt(formData.amount) || 0,
      userId: currentUser.id
    };
    setTransactions(prev => [...prev, newTransaction]);
  };

  const handleUpdateTransaction = (id, formData) => {
    setTransactions(prev => 
      prev.map(t => 
        t.id === id 
          ? { ...t, ...formData, amount: parseInt(formData.amount) || 0 }
          : t
      )
    );
  };

  const handleDeleteTransaction = (id) => {
    setTransactions(prev => prev.filter(t => t.id !== id));
  };

  const startEditTransaction = (transaction) => {
    setIsEditMode(true);
    setEditingTransaction(transaction);
    setTransactionForm({
      type: transaction.type,
      category: transaction.category,
      subcategory: transaction.subcategory || '',
      amount: transaction.amount.toString(),
      paymentMethod: transaction.paymentMethod || '',
      memo: transaction.memo || '',
      date: transaction.date
    });
    setShowAddTransaction(true);
  };

  const startAddTransaction = () => {
    setIsEditMode(false);
    setEditingTransaction(null);
    setTransactionForm({
      type: 'expense',
      category: '',
      subcategory: '',
      amount: '',
      paymentMethod: '',
      memo: '',
      date: new Date().toISOString().split('T')[0]
    });
    setShowAddTransaction(true);
  };

  const resetForm = () => {
    setTransactionForm({
      type: 'expense',
      category: '',
      subcategory: '',
      amount: '',
      paymentMethod: '',
      memo: '',
      date: new Date().toISOString().split('T')[0]
    });
    setIsEditMode(false);
    setEditingTransaction(null);
  };

  const handleSubmitTransaction = () => {
    if (transactionForm.category && transactionForm.amount) {
      if (isEditMode && editingTransaction) {
        handleUpdateTransaction(editingTransaction.id, transactionForm);
      } else {
        handleAddTransaction(transactionForm);
      }
      resetForm();
      setShowAddTransaction(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-pink-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <div className="flex items-center justify-center space-x-2 mb-4">
              <span className="text-3xl">👨</span>
              <Heart className="text-red-500" size={24} />
              <span className="text-3xl">👩</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-800 mb-2">우영 ♥ 달림</h1>
            <p className="text-gray-600">부부 가계부</p>
          </div>

          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">비밀번호</label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={loginPassword}
                  onChange={(e) => setLoginPassword(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleLogin();
                    }
                  }}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="비밀번호를 입력하세요"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-3 text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                </button>
              </div>
              {loginError && (
                <p className="mt-2 text-sm text-red-600">{loginError}</p>
              )}
            </div>

            <button
              type="button"
              onClick={handleLogin}
              className="w-full bg-gradient-to-r from-blue-500 to-pink-500 text-white py-3 rounded-lg font-medium hover:from-blue-600 hover:to-pink-600 transition-all duration-200 transform hover:scale-105"
            >
              로그인
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <header className="bg-white border-b border-gray-200 px-6 py-4 shadow-sm">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <span className="text-2xl">👨</span>
              <Heart className="text-red-500" size={20} />
              <span className="text-2xl">👩</span>
            </div>
            <h1 className="text-xl font-bold text-gray-900">우영 ♥ 달림 가계부</h1>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div className={`w-10 h-10 rounded-full ${currentUser.color} flex items-center justify-center text-white text-sm font-medium`}>
                {currentUser.avatar}
              </div>
              <span className="text-sm font-medium text-gray-700">{currentUser.name}</span>
            </div>
            <button
              onClick={handleLogout}
              className="flex items-center space-x-2 px-3 py-2 text-red-600 bg-red-50 rounded-lg hover:bg-red-100 transition-colors"
            >
              <LogOut size={16} />
              <span className="text-sm">로그아웃</span>
            </button>
          </div>
        </div>
      </header>

      <div className="flex">
        <nav className="w-64 bg-white border-r border-gray-200 min-h-screen shadow-sm">
          <div className="p-4 space-y-2">
            {[
              { id: 'calendar', name: '가계부', icon: PiggyBank },
              { id: 'statistics', name: '통계', icon: TrendingUp },
              { id: 'fixed', name: '고정지출', icon: Receipt },
              { id: 'search', name: '검색', icon: Search },
              { id: 'settings', name: '설정', icon: Settings }
            ].map(item => {
              const IconComponent = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => setCurrentView(item.id)}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-xl text-left font-medium transition-all duration-200 ${
                    currentView === item.id 
                      ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg transform scale-105' 
                      : 'text-gray-700 hover:bg-gray-50 hover:scale-102'
                  }`}
                >
                  <IconComponent size={20} />
                  <span>{item.name}</span>
                </button>
              );
            })}
          </div>
        </nav>

        <main className="flex-1 p-8">
          {currentView === 'calendar' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">
                  {currentDate.getFullYear()}년 {currentDate.getMonth() + 1}월
                </h2>
                <div className="flex space-x-3">
                  <button
                    onClick={() => {
                      const newDate = new Date(currentDate);
                      newDate.setMonth(newDate.getMonth() - 1);
                      setCurrentDate(newDate);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors"
                  >
                    <ChevronLeft size={20} />
                  </button>
                  <button
                    onClick={() => setCurrentDate(new Date())}
                    className="px-4 py-2 bg-blue-500 text-white rounded-xl text-sm font-medium hover:bg-blue-600 transition-colors"
                  >
                    오늘
                  </button>
                  <button
                    onClick={() => {
                      const newDate = new Date(currentDate);
                      newDate.setMonth(newDate.getMonth() + 1);
                      setCurrentDate(newDate);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors"
                  >
                    <ChevronRight size={20} />
                  </button>
                </div>
              </div>

              <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
                <div className="grid grid-cols-7 gap-0">
                  {['일', '월', '화', '수', '목', '금', '토'].map(day => (
                    <div key={day} className="p-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white text-center font-semibold">
                      {day}
                    </div>
                  ))}
                  
                  {(() => {
                    const daysInMonth = getDaysInMonth(currentDate);
                    const firstDay = getFirstDayOfMonth(currentDate);
                    const days = [];

                    // 이전 달 빈 칸
                    for (let i = 0; i < firstDay; i++) {
                      days.push(
                        <div key={`prev-${i}`} className="h-24 border border-gray-100 p-1 bg-gray-50">
                          <div className="text-sm text-gray-400 mb-1"></div>
                        </div>
                      );
                    }

                    // 현재 달 날짜들
                    for (let day = 1; day <= daysInMonth; day++) {
                      const dayTransactions = getDayTransactions(day, currentDate.getMonth(), currentDate.getFullYear());
                      const fixedExpensesForDay = getFixedExpensesForDay(day);
                      const isToday = 
                        day === new Date().getDate() &&
                        currentDate.getMonth() === new Date().getMonth() &&
                        currentDate.getFullYear() === new Date().getFullYear();

                      const allItems = [
                        ...dayTransactions,
                        ...fixedExpensesForDay.map(f => ({...f, type: 'fixed'}))
                      ];

                      days.push(
                        <div 
                          key={day} 
                          className={`h-24 border border-gray-200 p-1 hover:bg-gray-50 transition-colors ${
                            isToday ? 'ring-2 ring-blue-500' : ''
                          }`}
                        >
                          <div className="text-sm font-medium mb-1">{day}</div>
                          {allItems.length > 0 ? (
                            <div className="space-y-1">
                              {allItems.slice(0, 2).map((item, index) => {
                                const user = item.type === 'fixed' ? null : MOCK_USERS[item.userId];
                                
                                return (
                                  <div key={index} className="text-xs flex items-center justify-between group hover:bg-white hover:bg-opacity-50 rounded px-1 py-0.5 transition-colors">
                                    <div 
                                      className="flex items-center space-x-1 flex-1 cursor-pointer"
                                      onClick={() => {
                                        if (item.type !== 'fixed') {
                                          startEditTransaction(item);
                                        }
                                      }}
                                    >
                                      <div className={`w-2 h-2 rounded-full ${
                                        item.type === 'fixed' ? 'bg-orange-500' :
                                        user ? user.color : 'bg-gray-500'
                                      }`}></div>
                                      <span className={
                                        item.type === 'expense' || item.type === 'fixed' ? 'text-red-600' : 'text-blue-600'
                                      }>
                                        {item.type === 'expense' || item.type === 'fixed' ? '-' : '+'}
                                        {formatCurrency(item.amount)}
                                      </span>
                                    </div>
                                    {item.type !== 'fixed' && (
                                      <button
                                        type="button"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          handleDeleteTransaction(item.id);
                                        }}
                                        className="opacity-0 group-hover:opacity-100 p-0.5 text-red-500 hover:text-red-700 transition-all"
                                        title="삭제"
                                      >
                                        <X size={12} />
                                      </button>
                                    )}
                                  </div>
                                );
                              })}
                              {allItems.length > 2 && (
                                <div className="text-xs text-gray-500">
                                  +{allItems.length - 2}개 더
                                </div>
                              )}
                            </div>
                          ) : (
                            <div className="flex items-center justify-center h-12">
                              <div className="text-2xl opacity-30">😴</div>
                            </div>
                          )}
                        </div>
                      );
                    }

                    // 다음 달 빈 칸
                    const totalCells = 42;
                    const usedCells = firstDay + daysInMonth;
                    for (let i = 1; i <= totalCells - usedCells; i++) {
                      days.push(
                        <div key={`next-${i}`} className="h-24 border border-gray-100 p-1 bg-blue-50">
                          <div className="text-sm text-blue-400 mb-1">{i}</div>
                        </div>
                      );
                    }

                    return days;
                  })()}
                </div>
              </div>
            </div>
          )}

          {currentView === 'statistics' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">
                  {currentDate.getFullYear()}년 {currentDate.getMonth() + 1}월 통계
                </h2>
                <div className="flex space-x-3">
                  <button
                    onClick={() => {
                      const newDate = new Date(currentDate);
                      newDate.setMonth(newDate.getMonth() - 1);
                      setCurrentDate(newDate);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors"
                  >
                    <ChevronLeft size={20} />
                  </button>
                  <button
                    onClick={() => setCurrentDate(new Date())}
                    className="px-4 py-2 bg-blue-500 text-white rounded-xl text-sm font-medium hover:bg-blue-600 transition-colors"
                  >
                    이번 달
                  </button>
                  <button
                    onClick={() => {
                      const newDate = new Date(currentDate);
                      newDate.setMonth(newDate.getMonth() + 1);
                      setCurrentDate(newDate);
                    }}
                    className="p-3 hover:bg-gray-100 rounded-xl transition-colors"
                  >
                    <ChevronRight size={20} />
                  </button>
                </div>
              </div>

              {(() => {
                // 현재 월의 데이터 계산
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const startDate = new Date(year, month, 1);
                const endDate = new Date(year, month + 1, 0);
                
                const currentMonthData = transactions.filter(t => {
                  const transactionDate = new Date(t.date);
                  return transactionDate >= startDate && transactionDate <= endDate;
                });

                // 이전 월 데이터 계산
                const prevYear = month === 0 ? year - 1 : year;
                const prevMonth = month === 0 ? 11 : month - 1;
                const prevStartDate = new Date(prevYear, prevMonth, 1);
                const prevEndDate = new Date(prevYear, prevMonth + 1, 0);
                
                const previousMonthData = transactions.filter(t => {
                  const transactionDate = new Date(t.date);
                  return transactionDate >= prevStartDate && transactionDate <= prevEndDate;
                });

                // 수입/지출 계산
                const currentIncome = currentMonthData
                  .filter(t => t.type === 'income')
                  .reduce((sum, t) => sum + t.amount, 0);
                
                const currentExpense = currentMonthData
                  .filter(t => t.type === 'expense')
                  .reduce((sum, t) => sum + t.amount, 0);

                const previousIncome = previousMonthData
                  .filter(t => t.type === 'income')
                  .reduce((sum, t) => sum + t.amount, 0);
                
                const previousExpense = previousMonthData
                  .filter(t => t.type === 'expense')
                  .reduce((sum, t) => sum + t.amount, 0);

                // 카테고리별 지출 계산
                const expensesByCategory = currentMonthData
                  .filter(t => t.type === 'expense')
                  .reduce((acc, t) => {
                    const category = CATEGORIES.expense.find(c => c.id === t.category);
                    const categoryName = category ? category.name : '기타';
                    acc[categoryName] = (acc[categoryName] || 0) + t.amount;
                    return acc;
                  }, {});

                // 변화율 계산
                const incomeChange = previousIncome > 0 ? ((currentIncome - previousIncome) / previousIncome) * 100 : 0;
                const expenseChange = previousExpense > 0 ? ((currentExpense - previousExpense) / previousExpense) * 100 : 0;
                const savingChange = currentIncome - currentExpense;

                return (
                  <>
                    {/* 요약 카드들 */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">이번 달 수입</p>
                            <p className="text-2xl font-bold text-gray-800">{formatCurrency(currentIncome)}원</p>
                            {incomeChange !== 0 && (
                              <div className={`flex items-center mt-2 text-sm ${
                                incomeChange >= 0 ? 'text-green-600' : 'text-red-600'
                              }`}>
                                <span>전월 대비 </span>
                                <span className="font-semibold ml-1">
                                  {incomeChange > 0 ? '+' : ''}{incomeChange.toFixed(1)}%
                                </span>
                              </div>
                            )}
                          </div>
                          <div className="p-4 rounded-full bg-green-100 text-green-600">
                            <TrendingUp size={32} />
                          </div>
                        </div>
                      </div>

                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">이번 달 지출</p>
                            <p className="text-2xl font-bold text-gray-800">{formatCurrency(currentExpense)}원</p>
                            {expenseChange !== 0 && (
                              <div className={`flex items-center mt-2 text-sm ${
                                expenseChange <= 0 ? 'text-green-600' : 'text-red-600'
                              }`}>
                                <span>전월 대비 </span>
                                <span className="font-semibold ml-1">
                                  {expenseChange > 0 ? '+' : ''}{expenseChange.toFixed(1)}%
                                </span>
                              </div>
                            )}
                          </div>
                          <div className="p-4 rounded-full bg-red-100 text-red-600">
                            <Receipt size={32} />
                          </div>
                        </div>
                      </div>

                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">이번 달 저축</p>
                            <p className="text-2xl font-bold text-gray-800">{formatCurrency(savingChange)}원</p>
                          </div>
                          <div className={`p-4 rounded-full ${
                            savingChange >= 0 ? 'bg-blue-100 text-blue-600' : 'bg-red-100 text-red-600'
                          }`}>
                            <PiggyBank size={32} />
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* 카테고리별 지출 차트 */}
                    <div className="bg-white rounded-xl p-6 shadow-lg">
                      <h3 className="text-lg font-bold text-gray-800 mb-6">카테고리별 지출</h3>
                      
                      {Object.keys(expensesByCategory).length > 0 ? (
                        <div className="space-y-4">
                          {Object.entries(expensesByCategory)
                            .sort(([,a], [,b]) => b - a)
                            .map(([category, amount], index) => {
                              const maxAmount = Math.max(...Object.values(expensesByCategory));
                              const percentage = maxAmount > 0 ? (amount / maxAmount) * 100 : 0;
                              const colors = ['bg-blue-500', 'bg-red-500', 'bg-green-500', 'bg-yellow-500', 'bg-purple-500', 'bg-pink-500', 'bg-indigo-500'];
                              
                              return (
                                <div key={category} className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span className="text-gray-700 font-medium">{category}</span>
                                    <span className="font-bold text-gray-800">
                                      {formatCurrency(amount)}원
                                    </span>
                                  </div>
                                  <div className="w-full bg-gray-200 rounded-full h-3">
                                    <div 
                                      className={`h-3 rounded-full transition-all duration-1000 ease-out ${colors[index % colors.length]}`}
                                      style={{ width: `${percentage}%` }}
                                    ></div>
                                  </div>
                                </div>
                              );
                            })}
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <div className="text-6xl mb-4">📊</div>
                          <p className="text-gray-500">이번 달 지출 내역이 없습니다</p>
                        </div>
                      )}
                    </div>

                    {/* 가계 분석 */}
                    <div className="bg-white rounded-xl p-6 shadow-lg">
                      <h3 className="text-lg font-bold text-gray-800 mb-4">💡 이번 달 가계 분석</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <h4 className="font-semibold text-gray-700 flex items-center">
                            <TrendingUp size={16} className="mr-2 text-green-600" />
                            수입 분석
                          </h4>
                          <div className="space-y-3 text-sm bg-green-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span>총 수입:</span>
                              <span className="font-bold text-green-700">+{formatCurrency(currentIncome)}원</span>
                            </div>
                            <div className="flex justify-between">
                              <span>전월 대비:</span>
                              <span className={incomeChange >= 0 ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                                {incomeChange > 0 ? '+' : ''}{incomeChange.toFixed(1)}%
                              </span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="space-y-4">
                          <h4 className="font-semibold text-gray-700 flex items-center">
                            <Receipt size={16} className="mr-2 text-red-600" />
                            지출 분석
                          </h4>
                          <div className="space-y-3 text-sm bg-red-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span>총 지출:</span>
                              <span className="font-bold text-red-700">-{formatCurrency(currentExpense)}원</span>
                            </div>
                            <div className="flex justify-between">
                              <span>전월 대비:</span>
                              <span className={expenseChange <= 0 ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
                                {expenseChange > 0 ? '+' : ''}{expenseChange.toFixed(1)}%
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span>수입 대비 지출율:</span>
                              <span className="font-bold text-gray-800">
                                {currentIncome > 0 ? ((currentExpense / currentIncome) * 100).toFixed(1) : 0}%
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>

                      {savingChange > 0 ? (
                        <div className="mt-6 p-6 bg-gradient-to-r from-green-100 to-blue-100 rounded-xl border border-green-200">
                          <div className="flex items-start space-x-3">
                            <div className="text-3xl">🎉</div>
                            <div>
                              <p className="font-bold text-green-800 text-lg">훌륭해요!</p>
                              <p className="text-green-700 mt-1">
                                이번 달 <span className="font-bold text-xl">{formatCurrency(savingChange)}원</span>을 저축하셨습니다.
                              </p>
                              <p className="text-sm text-green-600 mt-2">
                                수입의 {currentIncome > 0 ? ((savingChange / currentIncome) * 100).toFixed(1) : 0}%를 저축하고 계시네요! 👏
                              </p>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="mt-6 p-6 bg-gradient-to-r from-red-100 to-orange-100 rounded-xl border border-red-200">
                          <div className="flex items-start space-x-3">
                            <div className="text-3xl">⚠️</div>
                            <div>
                              <p className="font-bold text-red-800 text-lg">주의가 필요해요</p>
                              <p className="text-red-700 mt-1">
                                이번 달 지출이 수입보다 <span className="font-bold text-xl">{formatCurrency(Math.abs(savingChange))}원</span> 많습니다.
                              </p>
                              <p className="text-sm text-red-600 mt-2">
                                다음 달에는 지출을 줄여보시는 것이 어떨까요? 💪
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </>
                );
              })()}
            </div>
          )}

          {currentView === 'fixed' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">고정지출 관리</h2>
                <button
                  onClick={() => {
                    resetFixedForm();
                    setShowAddFixed(true);
                  }}
                  className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105"
                >
                  <Plus size={20} />
                  <span>고정지출 추가</span>
                </button>
              </div>

              {(() => {
                // 고정지출 총합 계산
                const activeFixedTotal = fixedExpenses
                  .filter(fixed => fixed.isActive)
                  .reduce((sum, fixed) => sum + fixed.amount, 0);

                return (
                  <>
                    {/* 요약 카드 */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">활성 고정지출</p>
                            <p className="text-2xl font-bold text-gray-800">
                              {fixedExpenses.filter(f => f.isActive).length}개
                            </p>
                          </div>
                          <div className="p-4 rounded-full bg-blue-100 text-blue-600">
                            <Receipt size={32} />
                          </div>
                        </div>
                      </div>

                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">월 총 고정지출</p>
                            <p className="text-2xl font-bold text-red-600">
                              {formatCurrency(activeFixedTotal)}원
                            </p>
                          </div>
                          <div className="p-4 rounded-full bg-red-100 text-red-600">
                            <TrendingUp size={32} />
                          </div>
                        </div>
                      </div>

                      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-600 mb-1">전체 항목</p>
                            <p className="text-2xl font-bold text-gray-800">
                              {fixedExpenses.length}개
                            </p>
                            <p className="text-xs text-gray-500 mt-1">
                              비활성: {fixedExpenses.filter(f => !f.isActive).length}개
                            </p>
                          </div>
                          <div className="p-4 rounded-full bg-gray-100 text-gray-600">
                            <Settings size={32} />
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* 고정지출 목록 */}
                    <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
                      <div className="p-6 border-b border-gray-200">
                        <h3 className="text-lg font-bold text-gray-800">고정지출 목록</h3>
                        <p className="text-sm text-gray-600 mt-1">매월 자동으로 발생하는 지출을 관리하세요</p>
                      </div>

                      {fixedExpenses.length === 0 ? (
                        <div className="p-12 text-center">
                          <div className="text-6xl mb-4">📋</div>
                          <h3 className="text-lg font-semibold text-gray-800 mb-2">등록된 고정지출이 없습니다</h3>
                          <p className="text-gray-600 mb-4">월세, 대출, 보험료 등 매월 발생하는 지출을 등록해보세요</p>
                          <button
                            onClick={() => {
                              resetFixedForm();
                              setShowAddFixed(true);
                            }}
                            className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                          >
                            첫 고정지출 추가하기
                          </button>
                        </div>
                      ) : (
                        <div className="divide-y divide-gray-200">
                          {fixedExpenses.map(fixed => {
                            const category = CATEGORIES.expense.find(c => c.id === fixed.category);
                            const CategoryIcon = category?.icon || MoreHorizontal;
                            const paymentMethod = PAYMENT_METHODS.find(p => p.id === fixed.paymentMethod);

                            return (
                              <div key={fixed.id} className="p-6 hover:bg-gray-50 transition-colors">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center space-x-4 flex-1">
                                    <div className={`p-3 rounded-xl ${category?.color || 'bg-gray-100 text-gray-600'}`}>
                                      <CategoryIcon size={24} />
                                    </div>
                                    
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-3 mb-1">
                                        <h4 className="text-lg font-semibold text-gray-800">{fixed.name}</h4>
                                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                          fixed.isActive 
                                            ? 'bg-green-100 text-green-700' 
                                            : 'bg-gray-100 text-gray-600'
                                        }`}>
                                          {fixed.isActive ? '활성' : '비활성'}
                                        </span>
                                      </div>
                                      
                                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                                        <div>
                                          <span className="font-medium text-red-600">
                                            {formatCurrency(fixed.amount)}원
                                          </span>
                                          {fixed.monthlyIncrease > 0 && (
                                            <span className="text-orange-600">
                                              (+{formatCurrency(fixed.monthlyIncrease)})
                                            </span>
                                          )}
                                        </div>
                                        <div>매월 {fixed.autoRegisterDate}일</div>
                                        <div>{category?.name || '기타'}</div>
                                        <div>{paymentMethod?.name || '-'}</div>
                                      </div>
                                      
                                      {fixed.memo && (
                                        <p className="text-sm text-gray-500 mt-2">{fixed.memo}</p>
                                      )}
                                    </div>
                                  </div>

                                  <div className="flex items-center space-x-2">
                                    <button
                                      onClick={() => handleToggleActive(fixed.id)}
                                      className={`p-2 rounded-lg transition-colors ${
                                        fixed.isActive
                                          ? 'text-green-600 hover:bg-green-100'
                                          : 'text-gray-400 hover:bg-gray-100'
                                      }`}
                                      title={fixed.isActive ? '비활성화' : '활성화'}
                                    >
                                      <Eye size={18} />
                                    </button>
                                    
                                    <button
                                      onClick={() => startEditFixed(fixed)}
                                      className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors"
                                      title="수정"
                                    >
                                      <Edit2 size={18} />
                                    </button>
                                    
                                    <button
                                      onClick={() => handleDeleteFixedExpense(fixed.id)}
                                      className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors"
                                      title="삭제"
                                    >
                                      <Trash2 size={18} />
                                    </button>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </div>

                    {/* 도움말 */}
                    <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 border border-blue-200">
                      <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                        <AlertCircle size={20} className="mr-2 text-blue-600" />
                        고정지출 관리 도움말
                      </h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700">
                        <div>
                          <h4 className="font-medium mb-2">🔄 자동 등록</h4>
                          <p>설정한 날짜에 매월 자동으로 달력에 표시됩니다.</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">📈 월별 증가</h4>
                          <p>대출 이자처럼 매월 증가하는 금액을 설정할 수 있습니다.</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">⏸️ 일시 중지</h4>
                          <p>비활성화하면 달력에 표시되지 않습니다.</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">📊 통계 반영</h4>
                          <p>활성화된 고정지출만 통계에 포함됩니다.</p>
                        </div>
                      </div>
                    </div>
                  </>
                );
              })()}
            </div>
          )}

          {currentView === 'search' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">내역 검색</h2>
                <button
                  onClick={resetSearch}
                  className="flex items-center space-x-2 px-4 py-2 text-gray-600 bg-gray-100 rounded-xl font-medium hover:bg-gray-200 transition-colors"
                >
                  <X size={16} />
                  <span>초기화</span>
                </button>
              </div>

              {/* 검색 영역 */}
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <div className="space-y-4">
                  {/* 텍스트 검색 */}
                  <div>
                    <label className="block text-sm font-medium mb-2 text-gray-700">키워드 검색</label>
                    <div className="relative">
                      <input
                        type="text"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            performSearch();
                          }
                        }}
                        className="w-full p-3 pl-10 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="메모나 카테고리로 검색하세요"
                      />
                      <Search className="absolute left-3 top-3.5 text-gray-400" size={16} />
                    </div>
                  </div>

                  {/* 필터 영역 */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {/* 타입 필터 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">타입</label>
                      <select
                        value={searchFilters.type}
                        onChange={(e) => setSearchFilters({...searchFilters, type: e.target.value})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="all">전체</option>
                        <option value="income">수입</option>
                        <option value="expense">지출</option>
                      </select>
                    </div>

                    {/* 카테고리 필터 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">카테고리</label>
                      <select
                        value={searchFilters.category}
                        onChange={(e) => setSearchFilters({...searchFilters, category: e.target.value})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="all">전체</option>
                        {getAllCategories().map(category => (
                          <option key={category.id} value={category.id}>
                            {category.name} ({category.type === 'income' ? '수입' : '지출'})
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* 사용자 필터 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">사용자</label>
                      <select
                        value={searchFilters.user}
                        onChange={(e) => setSearchFilters({...searchFilters, user: e.target.value})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="all">전체</option>
                        {Object.values(MOCK_USERS).map(user => (
                          <option key={user.id} value={user.id}>{user.name}</option>
                        ))}
                      </select>
                    </div>

                    {/* 검색 버튼 */}
                    <div className="flex items-end">
                      <button
                        onClick={performSearch}
                        className="w-full py-2.5 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105"
                      >
                        검색
                      </button>
                    </div>
                  </div>

                  {/* 날짜 범위 */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">시작 날짜</label>
                      <input
                        type="date"
                        value={searchFilters.dateFrom}
                        onChange={(e) => setSearchFilters({...searchFilters, dateFrom: e.target.value})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">끝 날짜</label>
                      <input
                        type="date"
                        value={searchFilters.dateTo}
                        onChange={(e) => setSearchFilters({...searchFilters, dateTo: e.target.value})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                  </div>

                  {/* 금액 범위 */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">최소 금액</label>
                      <input
                        type="text"
                        value={searchFilters.amountMin}
                        onChange={(e) => setSearchFilters({...searchFilters, amountMin: e.target.value.replace(/[^0-9]/g, '')})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="예: 10000"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">최대 금액</label>
                      <input
                        type="text"
                        value={searchFilters.amountMax}
                        onChange={(e) => setSearchFilters({...searchFilters, amountMax: e.target.value.replace(/[^0-9]/g, '')})}
                        className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="예: 100000"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* 검색 결과 */}
              <div className="bg-white rounded-2xl shadow-lg">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-bold text-gray-800">검색 결과</h3>
                    {searchResults.length > 0 && (
                      <span className="text-sm text-gray-600">
                        총 {searchResults.length}개 내역
                      </span>
                    )}
                  </div>
                </div>

                {searchResults.length === 0 ? (
                  <div className="p-12 text-center">
                    {searchQuery || Object.values(searchFilters).some(v => v && v !== 'all') ? (
                      <>
                        <div className="text-6xl mb-4">🔍</div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-2">검색 결과가 없습니다</h3>
                        <p className="text-gray-600">다른 키워드나 필터로 다시 검색해보세요</p>
                      </>
                    ) : (
                      <>
                        <div className="text-6xl mb-4">🔎</div>
                        <h3 className="text-lg font-semibold text-gray-800 mb-2">검색을 시작해보세요</h3>
                        <p className="text-gray-600">키워드를 입력하거나 필터를 설정한 후 검색 버튼을 눌러주세요</p>
                      </>
                    )}
                  </div>
                ) : (
                  <div className="divide-y divide-gray-200">
                    {searchResults.map(transaction => {
                      const category = CATEGORIES[transaction.type]?.find(c => c.id === transaction.category);
                      const CategoryIcon = category?.icon || MoreHorizontal;
                      const user = MOCK_USERS[transaction.userId];
                      const paymentMethod = PAYMENT_METHODS.find(p => p.id === transaction.paymentMethod);

                      return (
                        <div key={transaction.id} className="p-6 hover:bg-gray-50 transition-colors">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-4 flex-1">
                              <div className={`p-3 rounded-xl ${category?.color || 'bg-gray-100 text-gray-600'}`}>
                                <CategoryIcon size={24} />
                              </div>
                              
                              <div className="flex-1">
                                <div className="flex items-center space-x-3 mb-1">
                                  <h4 className="text-lg font-semibold text-gray-800">
                                    {category?.name || '기타'}
                                  </h4>
                                  {transaction.subcategory && (
                                    <span className="text-sm text-gray-500">
                                      • {transaction.subcategory}
                                    </span>
                                  )}
                                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                    transaction.type === 'income' 
                                      ? 'bg-blue-100 text-blue-700' 
                                      : 'bg-red-100 text-red-700'
                                  }`}>
                                    {transaction.type === 'income' ? '수입' : '지출'}
                                  </span>
                                </div>
                                
                                <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm text-gray-600">
                                  <div>
                                    <span className={`font-semibold ${
                                      transaction.type === 'income' ? 'text-blue-600' : 'text-red-600'
                                    }`}>
                                      {transaction.type === 'income' ? '+' : '-'}
                                      {formatCurrency(transaction.amount)}원
                                    </span>
                                  </div>
                                  <div>{new Date(transaction.date).toLocaleDateString('ko-KR')}</div>
                                  <div>{user?.name || '알 수 없음'}</div>
                                  <div>{paymentMethod?.name || '-'}</div>
                                  <div className="md:col-span-1 text-gray-500 truncate">
                                    {transaction.memo || '-'}
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div className="flex items-center space-x-2">
                              <button
                                onClick={() => startEditTransaction(transaction)}
                                className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors"
                                title="수정"
                              >
                                <Edit2 size={18} />
                              </button>
                              
                              <button
                                onClick={() => handleDeleteTransaction(transaction.id)}
                                className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors"
                                title="삭제"
                              >
                                <Trash2 size={18} />
                              </button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>

              {/* 검색 통계 (결과가 있을 때만) */}
              {searchResults.length > 0 && (
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4">검색 결과 통계</h3>
                  
                  {(() => {
                    const totalIncome = searchResults
                      .filter(t => t.type === 'income')
                      .reduce((sum, t) => sum + t.amount, 0);
                    
                    const totalExpense = searchResults
                      .filter(t => t.type === 'expense')
                      .reduce((sum, t) => sum + t.amount, 0);

                    const incomeCount = searchResults.filter(t => t.type === 'income').length;
                    const expenseCount = searchResults.filter(t => t.type === 'expense').length;

                    return (
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center p-4 bg-blue-50 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">
                            {incomeCount}
                          </div>
                          <div className="text-sm text-gray-600">수입 건수</div>
                          <div className="text-lg font-semibold text-blue-700 mt-1">
                            +{formatCurrency(totalIncome)}원
                          </div>
                        </div>
                        
                        <div className="text-center p-4 bg-red-50 rounded-lg">
                          <div className="text-2xl font-bold text-red-600">
                            {expenseCount}
                          </div>
                          <div className="text-sm text-gray-600">지출 건수</div>
                          <div className="text-lg font-semibold text-red-700 mt-1">
                            -{formatCurrency(totalExpense)}원
                          </div>
                        </div>
                        
                        <div className="text-center p-4 bg-gray-50 rounded-lg">
                          <div className="text-2xl font-bold text-gray-800">
                            {searchResults.length}
                          </div>
                          <div className="text-sm text-gray-600">총 건수</div>
                          <div className="text-lg font-semibold text-gray-700 mt-1">
                            {formatCurrency(totalIncome + totalExpense)}원
                          </div>
                        </div>
                        
                        <div className="text-center p-4 bg-purple-50 rounded-lg">
                          <div className={`text-2xl font-bold ${
                            totalIncome - totalExpense >= 0 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {totalIncome - totalExpense >= 0 ? '+' : ''}
                            {formatCurrency(totalIncome - totalExpense)}원
                          </div>
                          <div className="text-sm text-gray-600">수입-지출</div>
                        </div>
                      </div>
                    );
                  })()}
                </div>
              )}
            </div>
          )}

          {currentView === 'settings' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-800">설정</h2>
                <div className="flex space-x-2">
                  <button
                    onClick={exportData}
                    className="flex items-center space-x-2 px-4 py-2 bg-green-500 text-white rounded-xl font-medium hover:bg-green-600 transition-colors"
                  >
                    <Receipt size={16} />
                    <span>내보내기</span>
                  </button>
                  <button
                    onClick={resetAllData}
                    className="flex items-center space-x-2 px-4 py-2 bg-red-500 text-white rounded-xl font-medium hover:bg-red-600 transition-colors"
                  >
                    <AlertCircle size={16} />
                    <span>초기화</span>
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* 기본 설정 */}
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    <Settings size={20} className="mr-2 text-blue-600" />
                    기본 설정
                  </h3>
                  
                  <div className="space-y-4">
                    {/* 테마 설정 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">테마</label>
                      <select
                        value={settings.theme}
                        onChange={(e) => updateSettings({theme: e.target.value})}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="default">기본 테마</option>
                        <option value="dark">다크 테마</option>
                        <option value="colorful">컬러풀 테마</option>
                      </select>
                    </div>

                    {/* 통화 설정 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">통화</label>
                      <select
                        value={settings.currency}
                        onChange={(e) => updateSettings({currency: e.target.value})}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="KRW">원 (₩)</option>
                        <option value="USD">달러 ($)</option>
                        <option value="EUR">유로 (€)</option>
                      </select>
                    </div>

                    {/* 날짜 형식 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">날짜 형식</label>
                      <select
                        value={settings.dateFormat}
                        onChange={(e) => updateSettings({dateFormat: e.target.value})}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="ko-KR">2024년 12월 25일</option>
                        <option value="en-US">Dec 25, 2024</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* 예산 설정 */}
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    <PiggyBank size={20} className="mr-2 text-green-600" />
                    예산 설정
                  </h3>
                  
                  <div className="space-y-4">
                    {/* 월 예산 */}
                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">월 예산</label>
                      <input
                        type="text"
                        value={settings.budget.monthly ? parseInt(settings.budget.monthly).toLocaleString() : ''}
                        onBlur={(e) => {
                          const value = e.target.value.replace(/[^0-9]/g, '');
                          updateSettings({
                            budget: {...settings.budget, monthly: value}
                          });
                          if (value) {
                            e.target.value = parseInt(value).toLocaleString();
                          }
                        }}
                        onFocus={(e) => {
                          const value = e.target.value.replace(/[^0-9]/g, '');
                          e.target.value = value;
                        }}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="예: 2000000"
                      />
                    </div>

                    {/* 카테고리별 예산 */}
                    <div>
                      <label className="block text-sm font-medium mb-3 text-gray-700">카테고리별 예산</label>
                      <div className="space-y-3">
                        {Object.entries(settings.budget.categories).map(([categoryId, amount]) => {
                          const category = CATEGORIES.expense.find(c => c.id === categoryId);
                          if (!category) return null;
                          
                          return (
                            <div key={categoryId} className="flex items-center space-x-3">
                              <div className={`p-2 rounded-lg ${category.color}`}>
                                {React.createElement(category.icon, { size: 16 })}
                              </div>
                              <span className="text-sm font-medium text-gray-700 w-20">
                                {category.name}
                              </span>
                              <input
                                type="text"
                                value={amount ? parseInt(amount).toLocaleString() : ''}
                                onBlur={(e) => {
                                  const value = e.target.value.replace(/[^0-9]/g, '');
                                  updateSettings({
                                    budget: {
                                      ...settings.budget,
                                      categories: {
                                        ...settings.budget.categories,
                                        [categoryId]: value
                                      }
                                    }
                                  });
                                  if (value) {
                                    e.target.value = parseInt(value).toLocaleString();
                                  }
                                }}
                                onFocus={(e) => {
                                  const value = e.target.value.replace(/[^0-9]/g, '');
                                  e.target.value = value;
                                }}
                                className="flex-1 p-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                placeholder="예산 입력"
                              />
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                </div>

                {/* 알림 설정 */}
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    <AlertCircle size={20} className="mr-2 text-yellow-600" />
                    알림 설정
                  </h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-700">예산 초과 알림</p>
                        <p className="text-xs text-gray-500">예산을 초과할 때 알림을 받습니다</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.notifications.budgetAlert}
                          onChange={(e) => updateSettings({
                            notifications: {
                              ...settings.notifications,
                              budgetAlert: e.target.checked
                            }
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-700">일일 기록 알림</p>
                        <p className="text-xs text-gray-500">매일 가계부 작성을 리마인드합니다</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.notifications.dailyReminder}
                          onChange={(e) => updateSettings({
                            notifications: {
                              ...settings.notifications,
                              dailyReminder: e.target.checked
                            }
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-700">주간 리포트</p>
                        <p className="text-xs text-gray-500">매주 가계부 요약을 받아봅니다</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.notifications.weeklyReport}
                          onChange={(e) => updateSettings({
                            notifications: {
                              ...settings.notifications,
                              weeklyReport: e.target.checked
                            }
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                  </div>
                </div>

                {/* 백업 설정 */}
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    <Receipt size={20} className="mr-2 text-purple-600" />
                    백업 설정
                  </h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-700">자동 백업</p>
                        <p className="text-xs text-gray-500">데이터를 자동으로 백업합니다</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.backup.autoBackup}
                          onChange={(e) => updateSettings({
                            backup: {
                              ...settings.backup,
                              autoBackup: e.target.checked
                            }
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">백업 주기</label>
                      <select
                        value={settings.backup.backupFrequency}
                        onChange={(e) => updateSettings({
                          backup: {
                            ...settings.backup,
                            backupFrequency: e.target.value
                          }
                        })}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="daily">매일</option>
                        <option value="weekly">매주</option>
                        <option value="monthly">매월</option>
                      </select>
                    </div>

                    <div className="pt-2">
                      <button
                        onClick={exportData}
                        className="w-full py-3 bg-purple-500 text-white rounded-xl font-medium hover:bg-purple-600 transition-colors"
                      >
                        지금 백업하기
                      </button>
                    </div>

                    <div>
                      <label className="block text-sm font-medium mb-2 text-gray-700">백업 가져오기</label>
                      <input
                        type="file"
                        accept=".json"
                        onChange={(e) => {
                          const file = e.target.files[0];
                          if (file) {
                            const reader = new FileReader();
                            reader.onload = (event) => {
                              importData(event.target.result);
                            };
                            reader.readAsText(file);
                          }
                        }}
                        className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <p className="text-xs text-gray-500 mt-1">JSON 파일만 지원됩니다</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* 앱 정보 */}
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                  <Heart size={20} className="mr-2 text-red-500" />
                  앱 정보
                </h3>
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center p-4 bg-blue-50 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">
                      {transactions.length}
                    </div>
                    <div className="text-sm text-gray-600">총 거래 내역</div>
                  </div>
                  
                  <div className="text-center p-4 bg-green-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">
                      {fixedExpenses.length}
                    </div>
                    <div className="text-sm text-gray-600">고정지출 항목</div>
                  </div>
                  
                  <div className="text-center p-4 bg-purple-50 rounded-lg">
                    <div className="text-2xl font-bold text-purple-600">
                      v1.0
                    </div>
                    <div className="text-sm text-gray-600">앱 버전</div>
                  </div>
                  
                  <div className="text-center p-4 bg-pink-50 rounded-lg">
                    <div className="text-2xl font-bold text-pink-600">
                      💕
                    </div>
                    <div className="text-sm text-gray-600">우영♥달림</div>
                  </div>
                </div>

                <div className="mt-6 text-center text-sm text-gray-500">
                  <p>부부를 위한 가계부 앱</p>
                  <p className="mt-1">사랑으로 만들어진 완벽한 가계 관리 시스템</p>
                </div>
              </div>
            </div>
          )}

          {currentView !== 'calendar' && currentView !== 'statistics' && currentView !== 'fixed' && currentView !== 'search' && currentView !== 'settings' && (
            <div className="p-8 text-center text-gray-500">
              <div className="text-6xl mb-4">🚧</div>
              <h3 className="text-xl font-semibold mb-2">준비 중입니다</h3>
              <p>해당 기능은 곧 추가될 예정입니다.</p>
            </div>
          )}
        </main>
      </div>

      {currentView === 'calendar' && (
        <button
          onClick={() => startAddTransaction()}
          className="fixed bottom-8 right-8 bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-full shadow-2xl hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-110"
        >
          <Plus size={28} />
        </button>
      )}

      {showAddTransaction && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-2xl">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800">
                  {isEditMode ? '내역 수정' : '내역 추가'}
                </h2>
                <button 
                  type="button"
                  onClick={() => {
                    resetForm();
                    setShowAddTransaction(false);
                  }}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div className="flex space-x-2">
                  <button
                    type="button"
                    onClick={() => setTransactionForm({...transactionForm, type: 'expense', category: ''})}
                    className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${
                      transactionForm.type === 'expense'
                        ? 'bg-red-500 text-white shadow-lg'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    지출
                  </button>
                  <button
                    type="button"
                    onClick={() => setTransactionForm({...transactionForm, type: 'income', category: ''})}
                    className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${
                      transactionForm.type === 'income'
                        ? 'bg-blue-500 text-white shadow-lg'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    수입
                  </button>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-3 text-gray-700">카테고리</label>
                  <div className="grid grid-cols-3 gap-3">
                    {CATEGORIES[transactionForm.type].map(category => {
                      const IconComponent = category.icon;
                      return (
                        <button
                          key={category.id}
                          type="button"
                          onClick={() => setTransactionForm({...transactionForm, category: category.id})}
                          className={`p-3 rounded-xl border-2 transition-all duration-200 transform hover:scale-105 ${
                            transactionForm.category === category.id
                              ? 'border-blue-500 bg-blue-50 shadow-lg' 
                              : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
                          } ${category.color}`}
                        >
                          <div className="flex flex-col items-center space-y-1">
                            <IconComponent size={24} />
                            <span className="text-xs font-medium">{category.name}</span>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">금액</label>
                  <input
                    type="text"
                    value={transactionForm.amount}
                    onChange={(e) => setTransactionForm({...transactionForm, amount: e.target.value.replace(/[^0-9]/g, '')})}
                    className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="금액을 입력하세요"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">날짜</label>
                  <input
                    type="date"
                    value={transactionForm.date}
                    onChange={(e) => setTransactionForm({...transactionForm, date: e.target.value})}
                    className="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">메모</label>
                  <textarea
                    value={transactionForm.memo}
                    onChange={(e) => setTransactionForm({...transactionForm, memo: e.target.value})}
                    className="w-full p-3 border border-gray-300 rounded-xl resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    rows="3"
                    placeholder="메모를 입력하세요"
                  />
                </div>

                <div className="flex space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      resetForm();
                      setShowAddTransaction(false);
                    }}
                    className="flex-1 py-3 px-4 border border-gray-300 rounded-xl text-gray-700 font-medium hover:bg-gray-50 transition-colors"
                  >
                    취소
                  </button>
                  <button
                    type="button"
                    onClick={handleSubmitTransaction}
                    disabled={!transactionForm.category || !transactionForm.amount}
                    className="flex-1 py-3 px-4 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl font-medium disabled:bg-gray-300 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 disabled:transform-none"
                  >
                    {isEditMode ? '수정' : '저장'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {showBackupModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto shadow-2xl">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold text-gray-800">데이터 백업</h2>
                <button 
                  type="button"
                  onClick={() => {
                    setShowBackupModal(false);
                    setBackupData('');
                  }}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">
                    백업 데이터 (JSON)
                  </label>
                  <textarea
                    value={backupData}
                    readOnly
                    className="w-full h-64 p-3 border border-gray-300 rounded-xl bg-gray-50 text-sm font-mono"
                  />
                </div>

                <div className="flex space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      navigator.clipboard.writeText(backupData);
                      alert('클립보드에 복사되었습니다!');
                    }}
                    className="flex-1 py-3 px-4 border border-gray-300 rounded-xl text-gray-700 font-medium hover:bg-gray-50 transition-colors"
                  >
                    클립보드 복사
                  </button>
                  <button
                    type="button"
                    onClick={downloadBackup}
                    className="flex-1 py-3 px-4 bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-xl font-medium hover:from-green-600 hover:to-blue-600 transition-all duration-200 transform hover:scale-105"
                  >
                    파일로 다운로드
                  </button>
                </div>

                <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
                  <p className="font-medium mb-1">💡 백업 사용법:</p>
                  <ul className="space-y-1 text-xs">
                    <li>• 클립보드 복사: 다른 기기에서 붙여넣기 가능</li>
                    <li>• 파일 다운로드: 안전한 보관용</li>
                    <li>• 백업 가져오기: 설정에서 JSON 파일 업로드</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}